# ================================================================
# SERVER-SIDE REQUIREMENTS FOR SLowMO-SDC PROJECT
# ================================================================
# Complete dependency list for all server-side Python modules
# Install with: pip install -r requirements.txt
# 
# Project: SLowMO-SDC (Satellite Low-Motion Spacecraft Dynamics Control)
# Location: client-server2/server/
# Generated: 2025-06-28
# ================================================================

# ── CORE WEB SERVER & COMMUNICATION ─────────────────────────────
flask>=2.3.0                    # Main web server framework
flask-socketio>=5.3.0           # Real-time bidirectional communication
gevent>=23.0.0                  # Async server backend
python-socketio>=5.8.0          # Socket.IO client for inter-service communication

# ── RASPBERRY PI HARDWARE INTERFACES ───────────────────────────
RPi.GPIO>=0.7.1                 # GPIO control for motor, sensors, pins
smbus>=1.1                      # I2C communication (legacy)
smbus2>=0.4.0                   # Modern I2C communication for LiDAR, MPU
picamera2>=0.3.0                # Raspberry Pi Camera Module interface

# ── ADAFRUIT SENSOR LIBRARIES ──────────────────────────────────
adafruit-circuitpython-veml7700>=1.1.0    # Light sensor (environmental calibration)
adafruit-circuitpython-busdevice>=5.2.0   # I2C/SPI device base classes
adafruit-circuitpython-tca9548a>=0.6.0    # I2C multiplexer
adafruit-blinka>=8.20.0                   # CircuitPython compatibility layer
adafruit-ina228>=1.0.0                    # Power monitoring sensor

# ── TEMPERATURE MONITORING ─────────────────────────────────────
w1thermsensor>=2.0.0            # 1-Wire temperature sensors (DS18B20)

# ── COMPUTER VISION & IMAGE PROCESSING ─────────────────────────
opencv-python>=4.8.0            # Camera streaming, image capture, processing
numpy>=1.24.0                   # Numerical computing, sensor data processing

# ── DATA PROCESSING & ANALYSIS ─────────────────────────────────
pandas>=2.0.0                   # Data manipulation and CSV logging
scipy>=1.10.0                   # Scientific computing, signal processing
matplotlib>=3.7.0               # Data visualization and plotting

# ── SYSTEM MONITORING ──────────────────────────────────────────
psutil>=5.9.0                   # System resource monitoring (CPU, memory)

# ── PYTHON STANDARD LIBRARY EXTENSIONS ────────────────────────
# These are typically included with Python but listed for completeness
typing-extensions>=4.0.0        # Enhanced type hints for older Python versions

# ── DEVELOPMENT & TESTING TOOLS ────────────────────────────────
# Uncomment for development/debugging
# pytest>=7.0.0                 # Unit testing framework
# black>=23.0.0                 # Code formatting
# flake8>=6.0.0                 # Code linting

# ================================================================
# HARDWARE-SPECIFIC NOTES
# ================================================================
# 
# 1. RASPBERRY PI REQUIREMENTS:
#    - Raspberry Pi OS (Bullseye or newer recommended)
#    - Python 3.9+ (comes with Raspberry Pi OS)
#    - Enable I2C, SPI, Camera in raspi-config
#    - Enable 1-Wire interface for temperature sensors
#
# 2. CONNECTED HARDWARE:
#    - Raspberry Pi Camera Module (v2 or v3)
#    - MPU-6050 6-axis IMU (accelerometer + gyroscope)
#    - VEML7700 light sensor
#    - TCA9548A I2C multiplexer
#    - INA228 power monitoring sensor
#    - DS18B20 temperature sensors (1-Wire)
#    - LiDAR sensor (I2C interface)
#    - Stepper/DC motor drivers
#    - Various GPIO-connected components
#
# 3. SYSTEM SERVICES:
#    - MPU calibration and data logging
#    - Camera streaming and image capture
#    - Motor control and tachometer
#    - Environmental sensor monitoring
#    - Power consumption tracking
#    - ADCS (Attitude Determination and Control System)
#
# 4. FILE SYSTEM REQUIREMENTS:
#    - Write access for log files, calibration data
#    - Camera image storage directory
#    - Configuration file storage
#
# ================================================================
# INSTALLATION INSTRUCTIONS
# ================================================================
#
# 1. Update system packages:
#    sudo apt update && sudo apt upgrade -y
#
# 2. Install system dependencies:
#    sudo apt install -y python3-pip python3-dev build-essential
#    sudo apt install -y i2c-tools python3-smbus
#    sudo apt install -y libcamera-dev python3-picamera2
#
# 3. Install Python requirements:
#    pip install -r requirements.txt
#
# 4. Enable hardware interfaces:
#    sudo raspi-config
#    # Enable: I2C, SPI, Camera, 1-Wire
#
# 5. Verify installations:
#    python3 -c "import cv2, numpy, flask, RPi.GPIO; print('✅ Core imports successful')"
#    i2cdetect -y 1  # Should show connected I2C devices
#
# ================================================================
# MODULE-SPECIFIC REQUIREMENTS
# ================================================================
#
# ┌─ server2.py (Main Server) ────────────────────────────────────
# │ • flask, flask-socketio, gevent
# │ • threading (built-in)
# │ • Imports: camera, sensors, lidar modules
# ├─ camera.py (Camera Streaming) ───────────────────────────────
# │ • picamera2, opencv-python
# │ • python-socketio, gevent
# ├─ sensors.py (System Monitoring) ─────────────────────────────
# │ • psutil, python-socketio
# │ • Temperature reading from /sys/class/thermal/
# ├─ lidar.py (Distance Measurement) ────────────────────────────
# │ • smbus2, python-socketio
# ├─ mpu.py (IMU Data & Calibration) ────────────────────────────
# │ • numpy, smbus, RPi.GPIO
# │ • Advanced 6-axis sensor calibration
# ├─ power.py (Power Monitoring) ────────────────────────────────
# │ • adafruit-ina228, adafruit-blinka
# │ • CSV logging, datetime
# ├─ temperature.py (Temperature Sensors) ───────────────────────
# │ • w1thermsensor (DS18B20 support)
# ├─ tachometer.py (Motor Speed) ─────────────────────────────────
# │ • RPi.GPIO (interrupt-based RPM measurement)
# ├─ motor_test.py (Motor Control) ───────────────────────────────
# │ • RPi.GPIO (PWM motor control)
# ├─ adcs_*.py (Attitude Control System) ────────────────────────
# │ • adafruit-circuitpython-veml7700
# │ • adafruit-circuitpython-tca9548a
# │ • numpy, scipy, matplotlib
# │ • Complex sensor fusion and control algorithms
# └─ pd_bangbang.py (Control Algorithm) ─────────────────────────
#   • RPi.GPIO, threading
#   • PD controller implementation
#
# ================================================================
